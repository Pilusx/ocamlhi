-- This file is based on:
-- * https://ocaml.org/manual/lex.html
-- * https://ocaml.org/manual/toplevel.html
-- * https://ocaml.org/manual/intfc.html
-- The OCaml language 4.12

comment "(*" "*)";
entrypoints Toplevel;

-- 3. Names
OpOr.        Infix ::= InfixOr;
OpAnd.       Infix ::= InfixAnd;
OpCompare.   Infix ::= InfixCompare;
OpAt.        Infix ::= InfixAt;
OpAppend.    Infix ::= "::";
OpAdd.       Infix ::= InfixAdd;
OpSubInt.    Infix ::= "-";
OpSubFloat.  Infix ::= "-.";
OpMul.       Infix ::= InfixMultiply;
OpMulInt.    Infix ::= "*";
OpShift.     Infix ::= InfixShift;
OpHash.      Infix ::= InfixHash;
OpAssignRef. Infix ::= InfixAssignRef;

-- 5. Constants
CInteger.    Constant ::= Integer;
CDouble.     Constant ::= Double;
CChar.       Constant ::= Char;
CString.     Constant ::= String;
CFalse.      Constant ::= "false";
CTrue.       Constant ::= "true";
CUnit1.      Constant ::= "()";
CUnit2.      Constant ::= "(" ")";
CBegin.      Constant ::= "begin" "end";
internal CConstructor. Constant ::= [OIdent];
internal CFun. Constant ::= "<fun>";

-- 7. Expressions

ForTo.             ForToDownTo ::= "to";
ForDownTo.         ForToDownTo ::= "downto";

RecNo.             RecOptional ::=;
RecYes.            RecOptional ::= "rec";

coercions Expr 24;

separator Field ";";
EField.            Field ::= Expr23 "=" Expr2;
EFieldDecl.        Field ::= Expr23 ":" Expr4;
EFieldDeclMut.     Field ::= "mutable" Expr23 ":" Expr4;

Variable.          Expr23 ::= [OIdent];
TIdent.            Expr23 ::= "'" OIdent;
Blank.             Expr23 ::= "_";
EConstant.         Expr23 ::= Constant;
Record.            Expr23 ::= "{" [Field] "}";
List.              Expr23 ::= "[" [Expr2] "]";
Nil1.              Expr23 ::= "[" "]";
Nil2.              Expr23 ::= "[]";

EBegin.            Expr22 ::= "begin" Expr "end";
EWhile.            Expr22 ::= "while" Expr "do" Expr "done";
EFor.              Expr22 ::= "for" Expr ForToDownTo Expr "do" Expr "done";

EPrefix.           Expr21 ::= Prefix Expr21;

EHash.             Expr19 ::= Expr19 InfixHash Expr20;

separator nonempty Expr18 " ";
EApply.            Expr17 ::= Expr18 [Expr18];
internal EConstructor. Expr17 ::= Expr23 Expr18;
internal TPolymorphic. Expr17 ::= Expr17 Expr23;

ENegateInt.        Expr16 ::= "-" Expr17;
ENegateFloat.      Expr16 ::= "-." Expr17;

separator nonempty Expr15 "*";
EShift.            Expr15 ::= Expr16 InfixShift Expr15;

EMultiply.         Expr14 ::= Expr14 InfixMultiply Expr15;
TTuple.            Expr14 ::= Expr15 "*" [Expr15];

EAdd.              Expr13 ::= Expr13 InfixAdd Expr14;
ESubInt.           Expr13 ::= Expr13 "-" Expr14;
ESubFloat.         Expr13 ::= Expr13 "-." Expr14; 

EAppend.           Expr12 ::= Expr13 "::" Expr12;

EAt.               Expr11 ::= Expr12 InfixAt Expr11;

ECompare.          Expr10 ::= Expr10 InfixCompare Expr11;

EAnd.              Expr9 ::= Expr10 InfixAnd Expr9;

EOr.               Expr8 ::= Expr9 InfixOr Expr8;

separator nonempty Expr8 ",";
ETuple.            Expr7 ::= Expr8 "," [Expr8];
internal TParams.  Expr7 ::= [Expr8];

EAssignRef.        Expr6 ::= Expr7 InfixAssignRef Expr6;
EAssign.           Expr6 ::= Expr7 "<-" Expr6;

EIf.               Expr5 ::= "if" Expr6 "then" Expr6;
EIfElse.           Expr5 ::= "if" Expr6 "then" Expr6 "else" Expr5;

TFunction.         Expr4 ::= Expr5 "->" Expr4;

ConstrOf.          Expr3 ::= Expr23 "of" Expr4;
ETyped.            Expr3 ::= Expr17 ":" Expr4;

separator nonempty Expr3 "|";
ConstrOr.          Expr2 ::= Expr3 "|" [Expr3];

separator nonempty Expr2 ";";
ESeq.              Expr1 ::= Expr2 ";" [Expr2];
ModuleSignature.   Expr1 ::= "sig" Toplevel "end";
ModuleDefinition.  Expr1 ::= "struct" Toplevel "end";

separator nonempty Expr1 "and";
Fun1.              Function ::= "fun";
Fun2.              Function ::= "function";
ELambda.           Expr1 ::= Function [Expr18] "->" Expr;
ELambdaTyped.      Expr1 ::= Function [Expr18] ":" Expr5 "->" Expr;

PatternPrefixNo.   PatternPrefixOptional ::=;
PatternPrefixYes.  PatternPrefixOptional ::= "|";

LetPattern.        Expr1 ::= Expr2 "=" Expr;
EMatch.            Expr1 ::= "match" Expr "with" PatternPrefixOptional [Expr3];
ETryWith.          Expr1 ::= "try" Expr "with" PatternPrefixOptional [Expr3];

ELetIn.            Expr ::= "let" RecOptional [Expr1] "in" Expr;

-- Chapter 10 The toplevel system or REPL (ocaml)

separator Statement "";
Signature.    Statement ::= "val" Expr3;
External.     Statement ::= "external" Expr1;
Typedef.      Statement ::= "type" Expr4 "=" PatternPrefixOptional [Expr3];
Exception.    Statement ::= "exception" Expr3;
Module.       Statement ::= "module" Expr1;
ModuleType.   Statement ::= "module" "type" Expr1;
Definition.   Statement ::= "let" RecOptional [Expr1];
SLetIn.       Statement ::= "let" RecOptional [Expr1] "in" Expr;
Expression.   Statement ::= ";;" Expr1;
Directive1.   Statement ::= "#" OIdent Expr17;
Directive2.   Statement ::= DirectiveIdent Expr17;
EndStmt.      Statement ::= Statement ";;";

Toplevel1.    Toplevel ::= [Statement];
Toplevel2.    Toplevel ::= Expr1 [Statement];

-- 1. Lexical conventions.
-- Identifiers should have lower priorities from tokens (lsl / land etc.)
-- That's why it is the last set of rules.

token Prefix (
-- ! { operator-char }
  ('!' (["~!?%<:.$&*+-/=>@^|"]*))
-- (? |  ~) { operator-char }+
| (["?~"] (["~!?%<:.$&*+-/=>@^|"]+))
);
token InfixHash ('#' (["~!?%<:.$&*+-/=>@^|"]+));
token InfixShift ({"lsl"} | {"lsr"} | {"asr"});
token InfixMultiply (
  ((["*/%"]) (["~!?%<:.$&*+-/=>@^|"]*)) |
  {"mod"} | {"land"} | {"lor"} | {"lxor"}
);
token InfixAdd ((["+-"]) (["~!?%<:.$&*+-/=>@^|"]*));
token InfixAt ((["@^"]) (["~!?%<:.$&*+-/=>@^|"]*));
token InfixCompare (((["=<>|&$"]) (["~!?%<:.$&*+-/=>@^|"]*)) | {"!="});
token InfixAnd ({"&"} | {"&&"});
token InfixOr ({"or"} | {"||"});
token InfixAssignRef ({":="});


token DirectiveIdent ( '#' (letter | '_' )* );
token UppercaseIdent ( upper ( letter | digit | '_' | '\'' )* );
token LowercaseIdent ( (lower | '_') ( letter | digit | '_' | '\'' )* );
separator nonempty OIdent ".";
IUppercase.               OIdent ::= UppercaseIdent;
ILowercase.               OIdent ::= LowercaseIdent;
IPrefix.                  OIdent ::= "(" Prefix ")";
IInfix.                   OIdent ::= "(" Infix ")";
internal IVer.            OIdent ::= "v." Integer;

internal TagModule.       Tag ::= "<module>";
internal TagType.         Tag ::= "<type>";
internal TagExpression.   Tag ::= "<expression>";
internal TagPattern.      Tag ::= "<pattern>";

internal CtxDeclaration.  NameContext ::= "<declaration>";
internal CtxGlobal.       NameContext ::= "<global_definition>";
internal CtxLocal.        NameContext ::= "<local_definition>";
internal CtxUsage.        NameContext ::= "<usage>";
