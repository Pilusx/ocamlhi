{"version": 2, "width": 176, "height": 18, "timestamp": 1740272348, "env": {"SHELL": null, "TERM": "xterm"}}
[0.00322, "o", "                 :@@@@@@@@@@@@@@                            \r\n            @@@@@:              @@@@%                       \r\n         @@@   ocamlhi  1.1.0.0     @@=  @@@@:  @           \r\n       @@                             @@@.=.::=*::@         \r\n    -@@      @@@      @@@%@@@=         @ .@*::::=@@         \r\n  @@.       @ %     @@.:::::.-@        @.::::.@@            \r\n#@           :@@@@@:.::::.:::: @%      @ ::: @              \r\n"]
[0.003641, "o", "            @@ .:::::::.:.:::::.@@     @ ::.@    @@         \r\n            @ :::::..:::::::::::. @@@@@.:::.@     @@        \r\n            @ :::: @ :.:::::::.::::::::::: @       @@       \r\n           @@:::: @@.:::::::::.::::::::::.@        :@:      \r\n         @@.::=+@@ @=:::..:.:::::::::::.@=          @@      \r\n         @:.@  *@..@ :@@@@@@. @@  @@@@=              @@     \r\n         @: %@  @ .@       #.% @  @                  @@     \r\n          @@@@  @@%#@@    @#.@ @. :@#                @@.    \r\n{\r\n    \"file\": \"09_List.ml\",\r\n    \"flags\": [\r\n        \"trace-hello\",\r\n        \"trace-input\",\r\n        \"trace-output\"\r\n    ],\r\n    \"includes\": [\r\n        \"tests/stdlib\",\r\n        \"tests/good\"\r\n    ],\r\n    \"no-default-flags\": true\r\n}\r\n"]
[0.006437, "o", "(ocaml) #use \"09_List.ml\"\r\n"]
[0.00672, "o", "(ocaml) #use \"assert.ml\"\r\n"]
[0.006864, "o", "(ocaml) type 'a assertion = Assertion of string * 'a\r\n"]
[0.006923, "o", "(ocaml) exception AssertEqualFailed of string * string\r\n"]
[0.006997, "o", "   val: AssertEqualFailed/v.0 : string * string -> exn = <fun>\r\n"]
[0.007035, "o", "(ocaml) module type SAssert = sig val eq : 'a -> 'a -> 'a assertion end\r\n"]
[0.00707, "o", "(ocaml) module Assert : SAssert = struct let eq a b = if __DEBUG__ then begin if a == b then Assertion (\"OK\", b) else raise (AssertEqualFailed (__tostring__ a , __tostring__ b ) ) end else Assertion (\"Skipped\", a) end\r\n"]
[0.00747, "o", "   val: Assert/eq/v.0 : 'a -> 'a -> 'a assertion = <fun>\r\n"]
[0.007613, "o", "(ocaml) #use \"list.ml\"\r\n"]
[0.008808, "o", "(ocaml) module type SList = sig val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b val length : 'a list -> int val hd : 'a list -> 'a val tl : 'a list -> 'a list val rev : 'a list -> 'a list val init : int -> (int -> 'a) -> 'a list val (++) : 'a list -> 'a list -> 'a list val map : ('a -> 'b) -> 'a list -> 'b list val empty : 'a list -> bool val combine : 'a list -> 'b list -> ('a * 'b) list val partition : ('a -> bool) -> 'a list -> 'a list * 'a list val empty_list_exception : string val equal_length_exception : string end\r\n"]
[0.009092, "o", "(ocaml) module List : SList = struct exception Exception of string let empty_list_exception = \"Empty List\" let equal_length_exception = \"Lists should have same lengths\" let rec fold_left f acc x = match x with | [] -> acc | h :: xs -> fold_left f (f acc h ) xs let rec fold_right f x acc = match x with | [] -> acc | h :: xs -> f h (fold_right f xs acc ) let length x = fold_left (fun acc _ -> acc + 1) 0 x let hd x = match x with | [] -> raise (Exception empty_list_exception ) | h :: _ -> h let tl x = match x with | [] -> raise (Exception empty_list_exception ) | [h] -> [] | _ :: xs -> xs let rev x = fold_left (fun acc x -> x :: acc) [] x let rec initHelper c n f = if c >= n then [] else f c :: initHelper (c + 1) n f let init n f = initHelper 0 n f let rec (++) l1 l2 = match l1 with | [] -> l2 | h :: xs -> h :: xs ++ l2 let rec map f x = match x with | [] -> [] | h :: xs -> f h :: map f xs let empty x = match x with | [] -> true | _ -> false let rec combine x y = match x, y with | h1 :: xs, h2 :: ys -> (h1, h2) "]
[0.009161, "o", ":: combine xs ys | [], [] -> [] | _, _ -> raise (Exception equal_length_exception ) let partition f x = let helper = fun el (x, y) -> if f el then el :: x, y else x, el :: y in fold_right helper x ([], []) end\r\n   val: List/Exception/v.0 : string -> exn = <fun>\r\n"]
[0.009307, "o", "   val: List/empty_list_exception/v.0 : string = \"Empty List\"\r\n   val: List/equal_length_exception/v.0 : string = \"Lists should have same lengths\"\r\n"]
[0.009477, "o", "   val: List/fold_left/v.0 : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>\r\n"]
[0.009667, "o", "   val: List/fold_right/v.0 : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>\r\n"]
[0.010276, "o", "   val: List/length/v.0 : 'a list -> int = <fun>\r\n"]
[0.010441, "o", "   val: List/hd/v.0 : 'a list -> 'a = <fun>\r\n"]
[0.010678, "o", "   val: List/tl/v.0 : 'a list -> 'a list = <fun>\r\n"]
[0.010857, "o", "   val: List/rev/v.0 : 'a list -> 'a list = <fun>\r\n"]
[0.011093, "o", "   val: List/initHelper/v.0 : int -> int -> (int -> 'a) -> 'a list = <fun>\r\n"]
[0.011266, "o", "   val: List/init/v.0 : int -> (int -> 'a) -> 'a list = <fun>\r\n"]
[0.011448, "o", "   val: List/(++)/v.0 : 'a list -> 'a list -> 'a list = <fun>\r\n"]
[0.011658, "o", "   val: List/map/v.0 : ('a -> 'b) -> 'a list -> 'b list = <fun>\r\n"]
[0.01201, "o", "   val: List/empty/v.0 : 'a list -> bool = <fun>\r\n"]
[0.012477, "o", "   val: List/combine/v.0 : 'a list -> 'b list -> ('a * 'b) list = <fun>\r\n"]
[0.012829, "o", "   val: List/partition/v.0 : ('a -> bool) -> 'a list -> 'a list * 'a list = <fun>\r\n"]
[0.01509, "o", "(ocaml) let n = []\r\n"]
[0.015178, "o", "   val: n/v.0 : 'a list = []\r\n(ocaml) let n2 = 2 :: n\r\n"]
[0.015236, "o", "   val: n2/v.0 : int list = [2]\r\n"]
[0.015262, "o", "(ocaml) let (++) = List . (++)\r\n"]
[0.015383, "o", "   val: (++)/v.0 : 'a list -> 'a list -> 'a list = <fun>\r\n"]
[0.015418, "o", "(ocaml) let n3 = [2; 3] ++ n\r\n"]
[0.015621, "o", "   val: n3/v.0 : int list = [2; 3]\r\n"]
[0.015706, "o", "(ocaml) Assert . eq ([3; 4; 5] ++ [6]) [3; 4; 5; 6]\r\n"]
[0.015962, "o", "    - : int list assertion = Assertion/v.0 (\"OK\", [3; 4; 5; 6])\r\n"]
[0.016016, "o", "(ocaml) let t = [3; 5; 7; 12]\r\n"]
[0.016205, "o", "   val: t/v.0 : int list = [3; 5; 7; 12]\r\n"]
[0.016253, "o", "(ocaml) let x = 2 :: t\r\n"]
[0.016321, "o", "   val: x/v.0 : int list = [2; 3; 5; 7; 12]\r\n"]
[0.01637, "o", "(ocaml) Assert . eq (List . hd x ) 2\r\n"]
[0.016585, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 2)\r\n"]
[0.016664, "o", "(ocaml) Assert . eq (List . tl x ) t\r\n"]
[0.016858, "o", "    - : int list assertion = Assertion/v.0 (\"OK\", [3; 5; 7; 12])\r\n"]
[0.01689, "o", "(ocaml) Assert . eq (List . hd (List . tl x ) ) 3\r\n"]
[0.017105, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 3)\r\n"]
[0.017138, "o", "(ocaml) Assert . eq (List . hd (List . rev x ) ) 12\r\n"]
[0.017405, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 12)\r\n"]
[0.017437, "o", "(ocaml) Assert . eq (List . fold_left (+) 0 x ) 29\r\n"]
[0.017699, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 29)\r\n"]
[0.017736, "o", "(ocaml) Assert . eq (List . length x ) 5\r\n"]
[0.017967, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 5)\r\n"]
[0.018002, "o", "(ocaml) Assert . eq (List . fold_right (fun _ acc -> acc + 1) x 0 ) 5\r\n"]
[0.018485, "o", "    - : int assertion = Assertion/v.0 (\"OK\", 5)\r\n(ocaml) let i4 = List . init 4 id\r\n"]
[0.018661, "o", "   val: i4/v.0 : int list = [0; 1; 2; 3]\r\n"]
[0.018684, "o", "(ocaml) let qi4 = List . init 4 (fun x -> x * x)\r\n"]
[0.01892, "o", "   val: qi4/v.0 : int list = [0; 1; 4; 9]\r\n"]
[0.018949, "o", "(ocaml) let mqi4 = List . map (fun x -> x * x) i4\r\n"]
[0.01917, "o", "   val: mqi4/v.0 : int list = [0; 1; 4; 9]\r\n"]
[0.019203, "o", "(ocaml) let res = [0; 1; 4; 9]\r\n"]
[0.019265, "o", "   val: res/v.0 : int list = [0; 1; 4; 9]\r\n"]
[0.019295, "o", "(ocaml) Assert . eq (qi4, mqi4) (res, res)\r\n"]
[0.019576, "o", "    - : (int list * int list) assertion = Assertion/v.0 (\"OK\", ([0; 1; 4; 9], [0; 1; 4; 9]))\r\n"]
[0.019619, "o", "(ocaml) let f = fun x -> x, x * x\r\n"]
[0.01973, "o", "   val: f/v.0 : int -> int * int = <fun>\r\n"]
[0.019778, "o", "(ocaml) Assert . eq (List . map f i4 ) (List . combine i4 qi4 )\r\n"]
[0.020425, "o", "    - : (int * int) list assertion = Assertion/v.0 (\"OK\", [0, 0; 1, 1; 2, 4; 3, 9])\r\n"]
